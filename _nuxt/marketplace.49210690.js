import{aU as F,aV as q,aW as M,aX as A,aY as x,ap as L,aq as y,al as c,am as d,ar as m,aL as T,aZ as b,a_ as v}from"./entry.0b904d76.js";const O=F("TokenStore",()=>{const n=q({});return{tokens:n,fetchTokens:async t=>{const a=t.filter(s=>!n[s]);if(a.length===0)return;const[i,r]=await Promise.all([A(a),x(a)]);i.forEach((s,l)=>{n[s.address]={...n[s.address],metadata:{...s,decimals:Number(s.decimals)},balance:null,price:r[l]}})}}},{persist:{storage:M.localStorage}}),f=[{inputs:[{internalType:"address payable",name:"_opWallet1",type:"address"},{internalType:"address payable",name:"_opWallet2",type:"address"},{internalType:"address payable",name:"_dividendsWallet",type:"address"},{internalType:"address payable",name:"_marketingWallet",type:"address"},{internalType:"address",name:"_dipERC20",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{indexed:!1,internalType:"uint8",name:"tokenDecimals",type:"uint8"}],name:"OrderCreated",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{components:[{internalType:"address",name:"fulfiller",type:"address"},{internalType:"uint256",name:"tokensReceived",type:"uint256"},{internalType:"uint256",name:"ethFulfilled",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"}],indexed:!1,internalType:"struct Dip.Fill",name:"fill",type:"tuple"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"newPrice",type:"uint256"}],name:"OrderPriceUpdated",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{components:[{internalType:"uint256",name:"withdrawAmount",type:"uint256"},{internalType:"uint256",name:"feeAmount",type:"uint256"},{internalType:"uint256",name:"refundedTokens",type:"uint256"}],indexed:!1,internalType:"struct Dip.Withdrawal",name:"withdrawal",type:"tuple"}],name:"OrderSettled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"transferTax",type:"uint256"}],name:"TransferTaxRecorded",type:"event"},{inputs:[],name:"contractState",outputs:[{internalType:"enum Dip.ContractState",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"dividendsWallet",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"dipERC20",outputs:[{internalType:"contract ERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"fishFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"},{internalType:"uint256",name:"expectedPricePerToken",type:"uint256"}],name:"fulfillOrder",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"marketingWallet",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"opWallet1",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"opWallet2",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"orders",outputs:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pauseContract",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"requesterTokenAmount",type:"uint256"},{internalType:"uint256",name:"requestedETHAmount",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"address",name:"whitelistedAddress",type:"address"}],name:"requestOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_dividendsWallet",type:"address"}],name:"setDividendsWallet",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_fishFee",type:"uint256"},{internalType:"uint256",name:"_whaleFee",type:"uint256"}],name:"setFees",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_marketingWallet",type:"address"}],name:"setMarketingWallet",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_opWallet1",type:"address"}],name:"setOpWallet1",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_opWallet2",type:"address"}],name:"setOpWallet2",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_threshold",type:"uint256"}],name:"setWhaleThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"}],name:"settleOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpauseContract",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"},{internalType:"uint256",name:"newPrice",type:"uint256"}],name:"updatePrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"whaleFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"whaleThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],{notify:S}=L(),E=async(n,e)=>{console.log("Broadcasting transaction",`${e} transaction sent...`),S.success({title:"Broadcasting transaction",message:`${e} transaction sent...`});const t=await n.wait();return t.status?(console.log(`${e} transaction succeeded.`),S.success({title:"Approval successful",message:`${e} transaction succeeded.`})):(console.log(`${e} transaction failed.`),S.danger({title:"Approval failed",message:`${e} transaction failed.`})),t},W=async()=>{var n;try{const e=await y(),[t]=[c()],{currentChain:a}=d(t),i=new m(T[a.value].marketplace,f,e),r=i.filters.OrderCreated(null,null),s=await i.queryFilter(r,"earliest","latest"),l=[];for(const o of s)(n=o.args)!=null&&n[1]&&l.push(o.args[1]);return l}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/getListingIds`.")}},B=async n=>{var e;try{const t=await y(),[a]=[c()],{currentChain:i}=d(a),r=new m(T[i.value].marketplace,f,t),s=r.filters.OrderCreated();s.address=n;const l=await r.queryFilter(s,"earliest","latest"),o=[];for(const p of l)(e=p.args)!=null&&e[1]&&p.args.order.requester.toLowerCase()===n.toLowerCase()&&o.push(p.args[1]);return o}catch(t){throw new Error(t instanceof Error?t.message:"Something went wrong in `/marketplace/getListingIdsByCreator`.")}},H=async n=>{var e;try{const t=await y(),[a]=[c()],{currentChain:i}=d(a),r=new m(T[i.value].marketplace,f,t),s=r.filters.OrderCreated();s.address=n;const l=await r.queryFilter(s,"earliest","latest"),o=[];for(const p of l)(e=p.args)!=null&&e[1]&&p.args.order.tokenAddress.toLowerCase()===n.toLowerCase()&&o.push(p.args[1]);return o}catch(t){throw new Error(t instanceof Error?t.message:"Something went wrong in `/marketplace/getListingIdsByToken`.")}},I=async n=>{var e;try{const t=[],a=await y(),[i]=[c()],{currentChain:r}=d(i),s=new m(T[r.value].marketplace,f,a),l=[s.filters.OrderCreated(null,n),s.filters.OrderFulfilled(null,n),s.filters.OrderPriceUpdated(null,n),s.filters.OrderSettled(null,n)];for(const o of l){const p=await s.queryFilter(o,"earliest","latest");for(const u of p)if((e=u.args)!=null&&e[1]){const h=await u.getBlock(),w=u.event;let g="",k=null;w==="OrderCreated"?(k=null,g=u.args[0][0]):w==="OrderFulfilled"?(k=Number(b(Number(u.args[2].tokensReceived).toString())),g=u.args[0][0]):(w==="OrderSettled"||w==="OrderPriceUpdated")&&(k=null,g=u.args[0][0]),t.unshift({type:u.event,timestamp:h.timestamp,address:g,tokens:k})}}return t}catch(t){throw new Error(t instanceof Error?t.message:"Something went wrong in `/marketplace/getListingHistory`.")}},D=async(n,e)=>{var t;try{const a=await y(),[i]=[c()],{currentChain:r}=d(i),s=new m(T[r.value].marketplace,f,a),o=await a.getBlockNumber()-e*n,p=s.filters.OrderCreated(null,null),h=(await s.queryFilter(p,o>=0?o:0,"latest")).slice(-e),w=[];for(const g of h)(t=g.args)!=null&&t[1]&&w.push(g.args[1]);return w}catch(a){throw new Error(a instanceof Error?a.message:"Something went wrong in `/marketplace/getListingsByPage`.")}},C=async n=>{try{const e=await y(),[t]=[c()],{currentChain:a}=d(t),r=await new m(T[a.value].marketplace,f,e).orders(n);if(!r)throw new Error("Listing not found");return{id:n,availableTokens:Number(b(v.from(r.availableTokens))),fulfilledETH:Number(b(v.from(r.fulfilledETH))),initialTokens:Number(b(v.from(r.initialTokens))),partiallyFillable:r.partiallyFillable,pricePerToken:Number(b(v.from(r.pricePerToken))),requestedETH:Number(b(v.from(r.requestedETH))),requester:r.requester,state:r.state,tokenAddress:r.tokenAddress.toLowerCase(),whitelistedAddress:r.whitelistedAddress}}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/getListing`.")}},N=async(n,e,t)=>{try{const a=await y(),[i]=[c()],{currentChain:r}=d(i),s=new m(T[r.value].marketplace,f,a),l=a.getSigner(),p=await s.connect(l).fulfillOrder(e,t,{value:n});return await E(p,"Fulfill")}catch(a){throw new Error(a instanceof Error?a.message:"Something went wrong in `/marketplace/fulfillOrder`.")}},_=async n=>{try{const e=await y(),[t]=[c()],{currentChain:a}=d(t),i=new m(T[a.value].marketplace,f,e),r=e.getSigner(),l=await i.connect(r).settleOrder(n);return await E(l,"Settle")}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/settleOrder`.")}},R=async(n,e,t,a,i)=>{try{const r=await y(),[s]=[c()],{currentChain:l}=d(s),o=new m(T[l.value].marketplace,f,r),p=r.getSigner(),h=await o.connect(p).requestOrder(n,e,t,a,i);return await E(h,"Request")}catch(r){throw new Error(r instanceof Error?r.message:"Something went wrong in `/marketplace/requestOrder`.")}};async function $(n){try{const e=O(),{tokens:t}=d(e);if(!n.length)return[];const a=await Promise.all(n.map(i=>C(i)));return await e.fetchTokens([...new Set(a.map(i=>i.tokenAddress))]),a.map(i=>({...i,token:t.value[i.tokenAddress]}))}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/fetchListingsByIds`.")}}async function U(n){try{const e=O(),{tokens:t}=d(e),a=await C(n);return await e.fetchTokens([a.tokenAddress]),{...a,token:t.value[a.tokenAddress]}}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/fetchListing`.")}}export{W as a,$ as b,I as c,N as d,D as e,U as f,H as g,C as h,B as i,R as r,_ as s};
