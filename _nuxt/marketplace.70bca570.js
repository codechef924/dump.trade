import{aU as q,aV as C,aW as F,aX as A,aY as x,ap as L,aq as y,al as c,am as d,ar as m,aL as T,aZ as w,a_ as k}from"./entry.3d3e841c.js";const E=q("TokenStore",()=>{const t=C({});return{tokens:t,fetchTokens:async n=>{const r=n.filter(s=>!t[s]);if(r.length===0)return;const[i,a]=await Promise.all([A(r),x(r)]);i.forEach((s,l)=>{t[s.address]={...t[s.address],metadata:{...s,decimals:Number(s.decimals)},balance:null,price:a[l]}})}}},{persist:{storage:F.localStorage}}),f=[{inputs:[{internalType:"address payable",name:"_opWallet1",type:"address"},{internalType:"address payable",name:"_opWallet2",type:"address"},{internalType:"address payable",name:"_dividendsWallet",type:"address"},{internalType:"address payable",name:"_marketingWallet",type:"address"},{internalType:"address",name:"_dipERC20",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{indexed:!1,internalType:"uint8",name:"tokenDecimals",type:"uint8"}],name:"OrderCreated",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{components:[{internalType:"address",name:"fulfiller",type:"address"},{internalType:"uint256",name:"tokensReceived",type:"uint256"},{internalType:"uint256",name:"ethFulfilled",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"}],indexed:!1,internalType:"struct Dip.Fill",name:"fill",type:"tuple"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"newPrice",type:"uint256"}],name:"OrderPriceUpdated",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],indexed:!1,internalType:"struct Dip.Order",name:"order",type:"tuple"},{indexed:!0,internalType:"bytes32",name:"orderId",type:"bytes32"},{components:[{internalType:"uint256",name:"withdrawAmount",type:"uint256"},{internalType:"uint256",name:"feeAmount",type:"uint256"},{internalType:"uint256",name:"refundedTokens",type:"uint256"}],indexed:!1,internalType:"struct Dip.Withdrawal",name:"withdrawal",type:"tuple"}],name:"OrderSettled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"transferTax",type:"uint256"}],name:"TransferTaxRecorded",type:"event"},{inputs:[],name:"contractState",outputs:[{internalType:"enum Dip.ContractState",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"dividendsWallet",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"dipERC20",outputs:[{internalType:"contract ERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"fishFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"},{internalType:"uint256",name:"expectedPricePerToken",type:"uint256"}],name:"fulfillOrder",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"marketingWallet",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"opWallet1",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"opWallet2",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"orders",outputs:[{internalType:"address",name:"requester",type:"address"},{internalType:"address",name:"whitelistedAddress",type:"address"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"initialTokens",type:"uint256"},{internalType:"uint256",name:"availableTokens",type:"uint256"},{internalType:"uint256",name:"requestedETH",type:"uint256"},{internalType:"uint256",name:"fulfilledETH",type:"uint256"},{internalType:"uint256",name:"pricePerToken",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"enum Dip.OrderState",name:"state",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pauseContract",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"requesterTokenAmount",type:"uint256"},{internalType:"uint256",name:"requestedETHAmount",type:"uint256"},{internalType:"bool",name:"partiallyFillable",type:"bool"},{internalType:"address",name:"whitelistedAddress",type:"address"}],name:"requestOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_dividendsWallet",type:"address"}],name:"setDividendsWallet",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_fishFee",type:"uint256"},{internalType:"uint256",name:"_whaleFee",type:"uint256"}],name:"setFees",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_marketingWallet",type:"address"}],name:"setMarketingWallet",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_opWallet1",type:"address"}],name:"setOpWallet1",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_opWallet2",type:"address"}],name:"setOpWallet2",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_threshold",type:"uint256"}],name:"setWhaleThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"}],name:"settleOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpauseContract",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"orderId",type:"bytes32"},{internalType:"uint256",name:"newPrice",type:"uint256"}],name:"updatePrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"whaleFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"whaleThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],{notify:S}=L(),O=async(t,e)=>{console.log("Broadcasting transaction",`${e} transaction sent...`),S.success({title:"Broadcasting transaction",message:`${e} transaction sent...`});const n=await t.wait();return n.status?(console.log(`${e} transaction succeeded.`),S.success({title:"Approval successful",message:`${e} transaction succeeded.`})):(console.log(`${e} transaction failed.`),S.danger({title:"Approval failed",message:`${e} transaction failed.`})),n},W=async()=>{var t;try{const e=await y(),[n]=[c()],{currentChain:r}=d(n),i=new m(T[r.value].marketplace,f,e),a=i.filters.OrderCreated(null,null),s=await i.queryFilter(a,"earliest","latest"),l=[];for(const o of s)(t=o.args)!=null&&t[1]&&l.push(o.args[1]);return l}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/getListingIds`.")}},H=async t=>{var e;try{const n=await y(),[r]=[c()],{currentChain:i}=d(r),a=new m(T[i.value].marketplace,f,n),s=a.filters.OrderCreated();s.address=t;const l=await a.queryFilter(s,"earliest","latest"),o=[];for(const p of l)(e=p.args)!=null&&e[1]&&p.args.order.requester.toLowerCase()===t.toLowerCase()&&o.push(p.args[1]);return o}catch(n){throw new Error(n instanceof Error?n.message:"Something went wrong in `/marketplace/getListingIdsByCreator`.")}},I=async t=>{var e;try{const n=await y(),[r]=[c()],{currentChain:i}=d(r),a=new m(T[i.value].marketplace,f,n),s=a.filters.OrderCreated();s.address=t;const l=await a.queryFilter(s,"earliest","latest"),o=[];for(const p of l)(e=p.args)!=null&&e[1]&&p.args.order.tokenAddress.toLowerCase()===t.toLowerCase()&&o.push(p.args[1]);return o}catch(n){throw new Error(n instanceof Error?n.message:"Something went wrong in `/marketplace/getListingIdsByToken`.")}},D=async t=>{var e;try{const n=[],r=await y(),[i]=[c()],{currentChain:a}=d(i),s=new m(T[a.value].marketplace,f,r),l=[s.filters.OrderCreated(null,t),s.filters.OrderFulfilled(null,t),s.filters.OrderPriceUpdated(null,t),s.filters.OrderSettled(null,t)];for(const o of l){const p=await s.queryFilter(o,"earliest","latest");for(const u of p)if((e=u.args)!=null&&e[1]){const v=await u.getBlock(),g=u.event;let b="",h=null;g==="OrderCreated"?(h=null,b=u.args[0][0]):g==="OrderFulfilled"?(h=Number(w(Number(u.args[2].tokensReceived).toString())),b=u.args[0][0]):(g==="OrderSettled"||g==="OrderPriceUpdated")&&(h=null,b=u.args[0][0]),n.unshift({type:u.event,timestamp:v.timestamp,address:b,tokens:h})}}return n}catch(n){throw new Error(n instanceof Error?n.message:"Something went wrong in `/marketplace/getListingHistory`.")}},M=async t=>{try{const e=await y(),[n]=[c()],{currentChain:r}=d(n),a=await new m(T[r.value].marketplace,f,e).orders(t);if(!a)throw new Error("Listing not found");return{id:t,availableTokens:Number(w(k.from(a.availableTokens))),fulfilledETH:Number(w(k.from(a.fulfilledETH))),initialTokens:Number(w(k.from(a.initialTokens))),partiallyFillable:a.partiallyFillable,pricePerToken:Number(w(k.from(a.pricePerToken))),requestedETH:Number(w(k.from(a.requestedETH))),requester:a.requester,state:a.state,tokenAddress:a.tokenAddress.toLowerCase(),whitelistedAddress:a.whitelistedAddress}}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/getListing`.")}},_=async(t,e,n)=>{try{const r=await y(),[i]=[c()],{currentChain:a}=d(i),s=new m(T[a.value].marketplace,f,r),l=r.getSigner(),p=await s.connect(l).fulfillOrder(e,n,{value:t});return await O(p,"Fulfill")}catch(r){throw new Error(r instanceof Error?r.message:"Something went wrong in `/marketplace/fulfillOrder`.")}},B=async t=>{try{const e=await y(),[n]=[c()],{currentChain:r}=d(n),i=new m(T[r.value].marketplace,f,e),a=e.getSigner(),l=await i.connect(a).settleOrder(t);return await O(l,"Settle")}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/settleOrder`.")}},N=async(t,e,n,r,i)=>{try{const a=await y(),[s]=[c()],{currentChain:l}=d(s),o=new m(T[l.value].marketplace,f,a),p=a.getSigner(),v=await o.connect(p).requestOrder(t,e,n,r,i);return await O(v,"Request")}catch(a){throw new Error(a instanceof Error?a.message:"Something went wrong in `/marketplace/requestOrder`.")}};async function R(t){try{const e=E(),{tokens:n}=d(e);if(!t.length)return[];const r=await Promise.all(t.map(i=>M(i)));return await e.fetchTokens([...new Set(r.map(i=>i.tokenAddress))]),r.map(i=>({...i,token:n.value[i.tokenAddress]}))}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/fetchListingsByIds`.")}}async function $(t){try{const e=E(),{tokens:n}=d(e),r=await M(t);return await e.fetchTokens([r.tokenAddress]),{...r,token:n.value[r.tokenAddress]}}catch(e){throw new Error(e instanceof Error?e.message:"Something went wrong in `/marketplace/fetchListing`.")}}export{W as a,R as b,D as c,_ as d,M as e,$ as f,I as g,H as h,N as r,B as s};
